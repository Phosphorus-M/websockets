use std::net::TcpListener;
use std::thread::spawn;

use tokio_tungstenite::tungstenite::{accept, Message};

/// A WebSocket echo server
fn main () {
    let server = TcpListener::bind("127.0.0.1:9001").unwrap();
    for stream in server.incoming() {
        spawn (move || {
            let mut websocket = accept(stream.unwrap()).unwrap();
            loop {
                let msg = websocket.read_message().unwrap();

                // We do not want to send back ping/pong messages.
                if msg.is_binary() || msg.is_text() {
                    let response = do_something(msg);
                    websocket.write_message(Message::Text(response.unwrap())).unwrap();
                }
            }
        });
    }
}

fn do_something(msg: Message) -> Result<String, String>{
    let Ok(content) = msg.to_text() else {
        return Err("No text message".to_string());
    };

    match content {
        "Hello" => Ok("Hello there!".to_string()),
        "Goodbye" => Ok("See you soon!".to_string()),
        _ => Ok("I don't understand you".to_string()),
    }
}